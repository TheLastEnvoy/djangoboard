import os
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from django.shortcuts import render
from django.conf import settings
from unidecode import unidecode
import numpy as np
from datetime import datetime
import unicodedata

def remove_special_chars(text):
    """Remove caracteres especiais e normaliza texto."""
    if not isinstance(text, str):
        return text  # Retorna o valor original se não for uma string
    return ''.join(ch for ch in unicodedata.normalize('NFKD', str(text)) 
                  if not unicodedata.combining(ch))

def load_data(file_name):
    """Carrega os dados do arquivo Excel."""
    try:
        file_path = os.path.join(settings.BASE_DIR, 'supervisao_ocupacional', 'data', file_name)
        print(f"Tentando carregar arquivo: {file_path}")

        if not os.path.exists(file_path):
            print(f"ERRO: Arquivo não encontrado: {file_path}")
            # Criar um DataFrame vazio com as colunas esperadas
            return pd.DataFrame(columns=[
                'Código SIPRA', 'Município', 'Assentamento', 'Lote', 'Arquivo',
                'Tipo de Laudo', 'Data', 'Técnico', 'Modalidade'
            ])

        # Carregar o arquivo Excel
        df = pd.read_excel(file_path)
        print(f"Arquivo carregado com sucesso. {len(df)} registros encontrados.")
        print(f"Colunas disponíveis: {df.columns.tolist()}")

        return df

    except Exception as e:
        print(f"ERRO ao carregar arquivo: {e}")
        # Retornar DataFrame vazio em caso de erro
        return pd.DataFrame(columns=[
            'Código SIPRA', 'Município', 'Assentamento', 'Lote', 'Arquivo',
            'Tipo de Laudo', 'Data', 'Técnico', 'Modalidade'
        ])

def index(request):
    """View para a página inicial."""
    # Carregar dados
    laudos_df = load_data('01_laudos_SO_infos.xlsx')
    documentospgt_df = load_data('02_contPGT.xlsx')
    docs_recebidos_df = load_data('03_contDocsRecebidos.xlsx')
    pareceres_df = load_data('04_contPareceres.xlsx')
    planilhas_df = load_data('05_contPlanilhas.xlsx')

    # Calcular estatísticas
    total_laudos = len(laudos_df)
    total_documentospgt = len(documentospgt_df)
    total_docs_recebidos = len(docs_recebidos_df)
    total_pareceres = len(pareceres_df)
    total_planilhas = len(planilhas_df)

    # Criar gráfico de barras para o total de cada categoria
    categorias = ['Laudos', 'Documentos PGT', 'Docs Recebidos', 'Pareceres', 'Planilhas']
    valores = [total_laudos, total_documentospgt, total_docs_recebidos, total_pareceres, total_planilhas]

    fig = px.bar(
        x=categorias,
        y=valores,
        title='Total por Categoria',
        labels={'x': 'Categoria', 'y': 'Total'},
        color_discrete_sequence=['#1f77b4']
    )

    fig.update_layout(
        xaxis_title="Categoria",
        yaxis_title="Total",
        bargap=0.2,
        bargroupgap=0.1
    )

    chart_json = fig.to_json()

    context = {
        'title': 'Dashboard de Supervisão Ocupacional',
        'total_laudos': total_laudos,
        'total_documentospgt': total_documentospgt,
        'total_docs_recebidos': total_docs_recebidos,
        'total_pareceres': total_pareceres,
        'total_planilhas': total_planilhas,
        'chart_json': chart_json,
    }

    return render(request, 'supervisao_ocupacional/index.html', context)

def laudos(request):
    """View para o dashboard de laudos."""
    # Carregar dados
    df = load_data('01_laudos_SO_infos.xlsx')

    # Verificar se as colunas esperadas existem
    expected_columns = [
        'Código SIPRA', 'Município', 'Assentamento', 'Lote', 'Arquivo',
        'Tipo de Laudo', 'Data', 'Técnico', 'Modalidade'
    ]

    for col in expected_columns:
        if col not in df.columns:
            print(f"AVISO: Coluna '{col}' não encontrada no DataFrame")

    # Preencher valores vazios
    df['Modalidade'] = df['Modalidade'].fillna('Desconhecido')
    df['Município'] = df['Município'].fillna('Desconhecido')
    df['Assentamento'] = df['Assentamento'].fillna('Desconhecido')
    df['Tipo de Laudo'] = df['Tipo de Laudo'].fillna('Desconhecido')

    # Aplicar a função para remover caracteres especiais
    df['Município'] = df['Município'].apply(remove_special_chars)

    # Converter coluna de data
    df['Data'] = pd.to_datetime(df['Data'], errors='coerce')
    # Remover registros com datas inválidas
    df = df.dropna(subset=['Data'])

    # Filtros
    tecnicos = ['Todos'] + sorted(list(df['Técnico'].unique()))
    municipios = ['Todos'] + sorted(list(df['Município'].unique()))
    assentamentos = ['Todos'] + sorted(list(df['Assentamento'].unique()))
    tipos_de_laudo = ['Todos'] + sorted(list(df['Tipo de Laudo'].unique()))
    modalidades = ['Todos'] + sorted(list(df['Modalidade'].unique()))

    # Aplicar filtros do request
    filtered_df = df.copy()

    tecnico_filtro = request.GET.get('tecnico', 'Todos')
    municipio_filtro = request.GET.get('municipio', 'Todos')
    assentamento_filtro = request.GET.get('assentamento', 'Todos')
    tipo_laudo_filtro = request.GET.get('tipo_laudo', 'Todos')
    modalidade_filtro = request.GET.get('modalidade', 'Todos')

    if tecnico_filtro != 'Todos':
        filtered_df = filtered_df[filtered_df['Técnico'] == tecnico_filtro]

    if municipio_filtro != 'Todos':
        filtered_df = filtered_df[filtered_df['Município'] == municipio_filtro]

    if assentamento_filtro != 'Todos':
        filtered_df = filtered_df[filtered_df['Assentamento'] == assentamento_filtro]

    if tipo_laudo_filtro != 'Todos':
        filtered_df = filtered_df[filtered_df['Tipo de Laudo'] == tipo_laudo_filtro]

    if modalidade_filtro != 'Todos':
        filtered_df = filtered_df[filtered_df['Modalidade'] == modalidade_filtro]

    # Calcular estatísticas - CORREÇÃO: Melhorar a filtragem das modalidades
    # Normalizar a coluna Modalidade para comparação
    df['Modalidade_Norm'] = df['Modalidade'].str.upper().str.strip()

    # Usar valores reais da planilha para as modalidades com filtragem melhorada
    vistoria_df = df[df['Modalidade_Norm'].str.contains('VISTORIA', na=False)]
    mutirao_df = df[df['Modalidade_Norm'].str.contains('MUTIR', na=False)]  # Captura "MUTIRÃO", "MUTIRAO", etc.

    total_vistoria = len(vistoria_df)
    total_mutirao = len(mutirao_df)

    # Meta total para cada modalidade (valores fixos conforme a imagem)
    meta_vistoria = 4739
    meta_mutirao = 2746

    # Calcular percentuais
    percentual_vistoria = (total_vistoria / meta_vistoria) * 100 if meta_vistoria > 0 else 0
    percentual_mutirao = (total_mutirao / meta_mutirao) * 100 if meta_mutirao > 0 else 0

    # Limitar percentuais a 100%
    percentual_vistoria = min(percentual_vistoria, 100)
    percentual_mutirao = min(percentual_mutirao, 100)

    # Gráfico de pizza - Distribuição por município
    municipio_counts = filtered_df['Município'].value_counts()
    # Garantir que temos pelo menos alguns municípios para mostrar
    if len(municipio_counts) > 0:
        # Limitar a 15 municípios mais frequentes para melhor visualização
        if len(municipio_counts) > 15:
            outros_count = municipio_counts[15:].sum()
            municipio_counts = municipio_counts[:15]
            municipio_counts['Outros'] = outros_count

        fig_municipio = px.pie(
            names=municipio_counts.index,
            values=municipio_counts.values,
            title='Distribuição dos Laudos por Município',
            hole=0.3,  # Donut chart
            color_discrete_sequence=px.colors.qualitative.Set3
        )
        fig_municipio.update_traces(textposition='inside', textinfo='percent+label')
        fig_municipio.update_layout(
            showlegend=True,
            legend=dict(orientation="v", yanchor="middle", y=0.5, xanchor="right", x=1.1)
        )
    else:
        # Gráfico vazio se não houver dados
        fig_municipio = px.pie(
            names=['Sem dados'],
            values=[1],
            title='Distribuição dos Laudos por Município'
        )

    municipio_chart = fig_municipio.to_json()

    # Gráficos de barras por mês para diferentes anos - CORREÇÃO: Melhorar a visualização mensal
    anos = [2023, 2024, 2025]
    mensal_charts = {}

    for ano in anos:
        df_ano = filtered_df[filtered_df['Data'].dt.year == ano]

        # CORREÇÃO: Usar resample para agrupar corretamente por mês
        if not df_ano.empty:
            # Configurar o índice como a data para usar resample
            df_temp = df_ano.set_index('Data')
            # Agrupar por mês e contar
            laudos_por_mes = df_temp.resample('M').size()
            # Converter o índice para número do mês (1-12)
            laudos_por_mes.index = laudos_por_mes.index.month
        else:
            # Se não houver dados para o ano, criar série vazia
            laudos_por_mes = pd.Series(dtype='int64')

        # Garantir que todos os meses estão representados (1-12)
        todos_meses = pd.Series(0, index=range(1, 13))
        laudos_por_mes = laudos_por_mes.combine_first(todos_meses).sort_index()

        # Converter números dos meses para nomes
        meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 
                 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']

        fig_mensal = px.bar(
            x=meses,
            y=laudos_por_mes.values,
            title=f'Quantidade de Laudos por Mês em {ano}',
            labels={'x': 'Mês', 'y': 'Quantidade de Laudos'},
            color_discrete_sequence=['#1f77b4']  # Cor azul consistente
        )
        fig_mensal.update_layout(
            xaxis_title="Mês",
            yaxis_title="Quantidade de Laudos",
            bargap=0.2,
            bargroupgap=0.1
        )
        mensal_charts[ano] = fig_mensal.to_json()

    # Gráfico de pizza - tipo de laudo
    tipo_laudo_counts = filtered_df['Tipo de Laudo'].value_counts()

    if len(tipo_laudo_counts) > 0:
        # Limitar a 10 tipos mais frequentes para melhor visualização
        if len(tipo_laudo_counts) > 10:
            outros_count = tipo_laudo_counts[10:].sum()
            tipo_laudo_counts = tipo_laudo_counts[:10]
            tipo_laudo_counts['Outros'] = outros_count

        fig_tipo_laudo = px.pie(
            names=tipo_laudo_counts.index,
            values=tipo_laudo_counts.values,
            title='Distribuição dos Laudos por Tipo',
            hole=0.3,  # Donut chart
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        fig_tipo_laudo.update_traces(textposition='inside', textinfo='percent+label')
        fig_tipo_laudo.update_layout(
            showlegend=True,
            legend=dict(orientation="v", yanchor="middle", y=0.5, xanchor="right", x=1.1)
        )
    else:
        # Gráfico vazio se não houver dados
        fig_tipo_laudo = px.pie(
            names=['Sem dados'],
            values=[1],
            title='Distribuição dos Laudos por Tipo'
        )

    tipo_laudo_chart = fig_tipo_laudo.to_json()

    # Calcular o total de laudos para cada tipo de laudo - CORREÇÃO: Ajustar nomes de colunas
    total_por_tipo_laudo = filtered_df['Tipo de Laudo'].value_counts().reset_index()
    total_por_tipo_laudo.columns = ['Tipo_de_Laudo', 'Quantidade']

    # Adicionar linha de total
    total_laudos = total_por_tipo_laudo['Quantidade'].sum()
    total_por_tipo_laudo.loc[len(total_por_tipo_laudo)] = ['Total', total_laudos]

    # CORREÇÃO: Ajustar o DataFrame para o template
    # Renomear a coluna 'Tipo de Laudo' para 'Tipo_de_Laudo' no DataFrame principal
    filtered_df_for_template = filtered_df.copy()
    if 'Tipo de Laudo' in filtered_df_for_template.columns:
        filtered_df_for_template['Tipo_de_Laudo'] = filtered_df_for_template['Tipo de Laudo']

    # Converter DataFrame para lista de dicionários para o template
    laudos_list = filtered_df_for_template.to_dict('records')
    tipos_laudo_list = total_por_tipo_laudo.to_dict('records')

    context = {
        'title': 'Dashboard de Laudos',
        'laudos': laudos_list,
        'total_laudos': len(filtered_df),
        'total_vistoria': total_vistoria,
        'total_mutirao': total_mutirao,
        'meta_vistoria': meta_vistoria,
        'meta_mutirao': meta_mutirao,
        'percentual_vistoria': percentual_vistoria,
        'percentual_mutirao': percentual_mutirao,
        'tecnicos': tecnicos,
        'municipios': municipios,
        'assentamentos': assentamentos,
        'tipos_de_laudo': tipos_de_laudo,
        'modalidades': modalidades,
        'tecnico_filtro': tecnico_filtro,
        'municipio_filtro': municipio_filtro,
        'assentamento_filtro': assentamento_filtro,
        'tipo_laudo_filtro': tipo_laudo_filtro,
        'modalidade_filtro': modalidade_filtro,
        'municipio_chart': municipio_chart,
        'mensal_chart_2023': mensal_charts[2023],
        'mensal_chart_2024': mensal_charts[2024],
        'mensal_chart_2025': mensal_charts[2025],
        'tipo_laudo_chart': tipo_laudo_chart,
        'tipos_laudo_list': tipos_laudo_list,
    }

    return render(request, 'supervisao_ocupacional/laudos.html', context)

def documentospgt(request):
    """View para o dashboard de documentos (PGT)."""
    # Carregar dados
    df = load_data('02_contPGT.xlsx')

    # Preencher valores vazios
    if 'Objetivo' in df.columns:
        df['Objetivo'] = df['Objetivo'].fillna('Não especificado')

    df['Município'] = df['Município'].fillna('Desconhecido')
    df['Assentamento'] = df['Assentamento'].fillna('Desconhecido')

    # Verificar se a coluna 'Tipo de documento PGT' existe
    if 'Tipo de documento PGT' not in df.columns:
        # Criar um DataFrame vazio com as colunas esperadas
        return render(request, 'supervisao_ocupacional/documentospgt.html', {
            'title': 'Dashboard de Documentos (PGT)',
            'error_message': "A coluna 'Tipo de documento PGT' não está presente nos dados."
        })

    # Preparar listas para filtros
    tipos_documentopgt = ['Todos'] + sorted(list(df['Tipo de documento PGT'].unique()))
    assentamentos = ['Todos'] + sorted(list(df['Assentamento'].unique()))
    municipios = ['Todos'] + sorted(list(df['Município'].unique()))

    if 'Nome T1' in df.columns:
        nomes_t1 = ['Todos'] + sorted(list(df['Nome T1'].unique()))
    else:
        nomes_t1 = ['Todos']

    if 'Objetivo' in df.columns:
        objetivos = ['Todos'] + sorted(list(df['Objetivo'].unique()))
    else:
        objetivos = ['Todos']

    # Aplicar filtros do request
    filtered_df = df.copy()

    tipo_documentopgt_filtro = request.GET.get('tipo_documentopgt', 'Todos')
    assentamento_filtro = request.GET.get('assentamento', 'Todos')
    municipio_filtro = request.GET.get('municipio', 'Todos')
    nome_t1_filtro = request.GET.get('nome_t1', 'Todos')
    objetivo_filtro = request.GET.get('objetivo', 'Todos')

    if tipo_documentopgt_filtro != 'Todos':
        filtered_df = filtered_df[filtered_df['Tipo de documento PGT'] == tipo_documentopgt_filtro]

    if assentamento_filtro != 'Todos':
        filtered_df = filtered_df[filtered_df['Assentamento'] == assentamento_filtro]

    if municipio_filtro != 'Todos':
        filtered_df = filtered_df[filtered_df['Município'] == municipio_filtro]

    if nome_t1_filtro != 'Todos' and 'Nome T1' in filtered_df.columns:
        filtered_df = filtered_df[filtered_df['Nome T1'] == nome_t1_filtro]

    if objetivo_filtro != 'Todos' and 'Objetivo' in filtered_df.columns:
        filtered_df = filtered_df[filtered_df['Objetivo'] == objetivo_filtro]

    # Calcular estatísticas para barras de progresso
    relatorios_conf_atual = len(df[df['Tipo de documento PGT'] == 'Relatório de conformidades para regularização'])
    solicitacoes_atual = len(df[df['Tipo de documento PGT'] == 'Solicitação de documentação complementar'])
    segundos_relatorios_atual = len(df[df['Tipo de documento PGT'].str.contains('2º Relatório', na=False)])
    analise_reg_atual = len(df[df['Tipo de documento PGT'] == 'Análise para regularização'])

    # Definir metas
    total_relatorios_conf = 2246
    total_solicitacoes = 674
    total_segundos_relatorios = 337
    total_analise_reg = 1622

    # Calcular percentuais
    percentual_relatorios_conf = (relatorios_conf_atual / total_relatorios_conf) * 100 if total_relatorios_conf > 0 else 0
    percentual_solicitacoes = (solicitacoes_atual / total_solicitacoes) * 100 if total_solicitacoes > 0 else 0
    percentual_segundos_relatorios = (segundos_relatorios_atual / total_segundos_relatorios) * 100 if total_segundos_relatorios > 0 else 0
    percentual_analise_reg = (analise_reg_atual / total_analise_reg) * 100 if total_analise_reg > 0 else 0

    # Limitar percentuais a 100%
    percentual_relatorios_conf = min(percentual_relatorios_conf, 100)
    percentual_solicitacoes = min(percentual_solicitacoes, 100)
    percentual_segundos_relatorios = min(percentual_segundos_relatorios, 100)
    percentual_analise_reg = min(percentual_analise_reg, 100)

    # Gráfico de pizza - Distribuição por tipo de documento
    tipo_documentopgt_counts = filtered_df['Tipo de documento PGT'].value_counts()
    if len(tipo_documentopgt_counts) > 0:
        fig_tipo_documentopgt = px.pie(
            names=tipo_documentopgt_counts.index,
            values=tipo_documentopgt_counts.values,
            title='Distribuição dos Documentos por Tipo'
        )
        fig_tipo_documentopgt.update_traces(textposition='inside', textinfo='percent+label')
        fig_tipo_documentopgt.update_layout(
            showlegend=True,
            legend=dict(orientation="v", yanchor="middle", y=0.5, xanchor="right", x=1.1)
        )
    else:
        fig_tipo_documentopgt = px.pie(
            names=['Sem dados'],
            values=[1],
            title='Distribuição dos Documentos por Tipo'
        )
    tipo_documentopgt_chart = fig_tipo_documentopgt.to_json()

    # Gráfico de pizza - Distribuição por município
    municipio_counts = filtered_df['Município'].value_counts()
    if len(municipio_counts) > 0:
        fig_municipio = px.pie(
            names=municipio_counts.index,
            values=municipio_counts.values,
            title='Distribuição dos Documentos por Município'
        )
        fig_municipio.update_traces(textposition='inside', textinfo='percent+label')
        fig_municipio.update_layout(
            showlegend=True,
            legend=dict(orientation="v", yanchor="middle", y=0.5, xanchor="right", x=1.1)
        )
    else:
        fig_municipio = px.pie(
            names=['Sem dados'],
            values=[1],
            title='Distribuição dos Documentos por Município'
        )
    municipio_chart = fig_municipio.to_json()

    # Gráfico de barras - Distribuição por assentamento
    assentamento_counts = filtered_df['Assentamento'].value_counts().reset_index()
    assentamento_counts.columns = ['Assentamento', 'Quantidade']
    if len(assentamento_counts) > 0:
        fig_assentamento = px.bar(
            assentamento_counts,
            x='Assentamento',
            y='Quantidade',
            title='Distribuição dos Documentos por Assentamento'
        )
        fig_assentamento.update_layout(
            xaxis_title="Assentamento",
            yaxis_title="Quantidade",
            bargap=0.2,
            bargroupgap=0.1
        )
    else:
        fig_assentamento = px.bar(
            x=['Sem dados'],
            y=[0],
            title='Distribuição dos Documentos por Assentamento'
        )
    assentamento_chart = fig_assentamento.to_json()

    # Gráfico de barras - Distribuição por objetivo (se existir)
    objetivo_chart = None
    if 'Objetivo' in filtered_df.columns:
        objetivo_counts = filtered_df['Objetivo'].value_counts().reset_index()
        objetivo_counts.columns = ['Objetivo', 'Quantidade']
        if len(objetivo_counts) > 0:
            fig_objetivo = px.bar(
                objetivo_counts,
                x='Objetivo',
                y='Quantidade',
                title='Distribuição dos Documentos por Objetivo'
            )
            fig_objetivo.update_layout(
                xaxis_title="Objetivo",
                yaxis_title="Quantidade",
                bargap=0.2,
                bargroupgap=0.1
            )
            objetivo_chart = fig_objetivo.to_json()

    # Tabela de quantidade por tipo e assentamento
    total_por_tipo_assentamento = filtered_df.groupby(['Tipo de documento PGT', 'Assentamento']).size().reset_index(name='Quantidade')
    tipo_assentamento_list = total_por_tipo_assentamento.to_dict('records')

    # Converter DataFrame para lista de dicionários para o template
    documentospgt_list = filtered_df.to_dict('records')

    context = {
        'title': 'Dashboard de Documentos (PGT)',
        'documentospgt': documentospgt_list,
        'total_documentospgt': len(filtered_df),
        'tipos_documentopgt': tipos_documentopgt,
        'assentamentos': assentamentos,
        'municipios': municipios,
        'nomes_t1': nomes_t1,
        'objetivos': objetivos,
        'tipo_documentopgt_filtro': tipo_documentopgt_filtro,
        'assentamento_filtro': assentamento_filtro,
        'municipio_filtro': municipio_filtro,
        'nome_t1_filtro': nome_t1_filtro,
        'objetivo_filtro': objetivo_filtro,
        'relatorios_conf_atual': relatorios_conf_atual,
        'solicitacoes_atual': solicitacoes_atual,
        'segundos_relatorios_atual': segundos_relatorios_atual,
        'analise_reg_atual': analise_reg_atual,
        'total_relatorios_conf': total_relatorios_conf,
        'total_solicitacoes': total_solicitacoes,
        'total_segundos_relatorios': total_segundos_relatorios,
        'total_analise_reg': total_analise_reg,
        'percentual_relatorios_conf': percentual_relatorios_conf,
        'percentual_solicitacoes': percentual_solicitacoes,
        'percentual_segundos_relatorios': percentual_segundos_relatorios,
        'percentual_analise_reg': percentual_analise_reg,
        'tipo_documentopgt_chart': tipo_documentopgt_chart,
        'municipio_chart': municipio_chart,
        'assentamento_chart': assentamento_chart,
        'objetivo_chart': objetivo_chart,
        'tipo_assentamento_list': tipo_assentamento_list,
    }

    return render(request, 'supervisao_ocupacional/documentospgt.html', context)

def docs_recebidos(request):
    """View para o dashboard de documentos recebidos."""
    # Carregar dados (ajuste o nome do arquivo conforme necessário)
    try:
        df = load_data('docs_recebidos.xlsx')
    except:
        # Caso o arquivo não exista, crie um DataFrame vazio
        df = pd.DataFrame()

    # Preencher valores vazios se o DataFrame não estiver vazio
    if not df.empty:
        if 'Município' in df.columns:
            df['Município'] = df['Município'].fillna('Desconhecido')

        # Preparar listas para filtros
        municipios = ['Todos']
        if 'Município' in df.columns:
            municipios += sorted(list(df['Município'].unique()))

        # Aplicar filtros do request
        filtered_df = df.copy()
        municipio_filtro = request.GET.get('municipio', 'Todos')

        if municipio_filtro != 'Todos' and 'Município' in filtered_df.columns:
            filtered_df = filtered_df[filtered_df['Município'] == municipio_filtro]

        # Gráficos e estatísticas
        total_documentos = len(filtered_df)

        # Converter DataFrame para lista de dicionários para o template
        documentos_list = filtered_df.to_dict('records')

        # Gráfico de pizza - Distribuição por município (se a coluna existir)
        municipio_chart = None
        if 'Município' in filtered_df.columns:
            municipio_counts = filtered_df['Município'].value_counts()
            if len(municipio_counts) > 0:
                fig_municipio = px.pie(
                    names=municipio_counts.index,
                    values=municipio_counts.values,
                    title='Distribuição dos Documentos por Município'
                )
                fig_municipio.update_traces(textposition='inside', textinfo='percent+label')
                municipio_chart = fig_municipio.to_json()
    else:
        # Valores padrão se o DataFrame estiver vazio
        municipios = ['Todos']
        municipio_filtro = 'Todos'
        total_documentos = 0
        documentos_list = []
        municipio_chart = None

    context = {
        'title': 'Dashboard de Documentos Recebidos',
        'documentos': documentos_list,
        'total_documentos': total_documentos,
        'municipios': municipios,
        'municipio_filtro': municipio_filtro,
        'municipio_chart': municipio_chart,
    }

    return render(request, 'supervisao_ocupacional/docs_recebidos.html', context)


def pareceres(request):
    """View para o dashboard de pareceres."""
    # Carregar dados (ajuste o nome do arquivo conforme necessário)
    try:
        df = load_data('pareceres.xlsx')
    except:
        # Caso o arquivo não exista, crie um DataFrame vazio
        df = pd.DataFrame()

    # Preencher valores vazios se o DataFrame não estiver vazio
    if not df.empty:
        if 'Município' in df.columns:
            df['Município'] = df['Município'].fillna('Desconhecido')

        # Preparar listas para filtros
        municipios = ['Todos']
        if 'Município' in df.columns:
            municipios += sorted(list(df['Município'].unique()))

        # Aplicar filtros do request
        filtered_df = df.copy()
        municipio_filtro = request.GET.get('municipio', 'Todos')

        if municipio_filtro != 'Todos' and 'Município' in filtered_df.columns:
            filtered_df = filtered_df[filtered_df['Município'] == municipio_filtro]

        # Gráficos e estatísticas
        total_pareceres = len(filtered_df)

        # Converter DataFrame para lista de dicionários para o template
        pareceres_list = filtered_df.to_dict('records')

        # Gráfico de pizza - Distribuição por município (se a coluna existir)
        municipio_chart = None
        if 'Município' in filtered_df.columns:
            municipio_counts = filtered_df['Município'].value_counts()
            if len(municipio_counts) > 0:
                fig_municipio = px.pie(
                    names=municipio_counts.index,
                    values=municipio_counts.values,
                    title='Distribuição dos Pareceres por Município'
                )
                fig_municipio.update_traces(textposition='inside', textinfo='percent+label')
                municipio_chart = fig_municipio.to_json()
    else:
        # Valores padrão se o DataFrame estiver vazio
        municipios = ['Todos']
        municipio_filtro = 'Todos'
        total_pareceres = 0
        pareceres_list = []
        municipio_chart = None

    context = {
        'title': 'Dashboard de Pareceres',
        'pareceres': pareceres_list,
        'total_pareceres': total_pareceres,
        'municipios': municipios,
        'municipio_filtro': municipio_filtro,
        'municipio_chart': municipio_chart,
    }

    return render(request, 'supervisao_ocupacional/pareceres.html', context)


def planilhas(request):
    """View para o dashboard de planilhas."""
    # Carregar dados (ajuste o nome do arquivo conforme necessário)
    try:
        df = load_data('planilhas.xlsx')
    except:
        # Caso o arquivo não exista, crie um DataFrame vazio
        df = pd.DataFrame()

    # Preencher valores vazios se o DataFrame não estiver vazio
    if not df.empty:
        if 'Município' in df.columns:
            df['Município'] = df['Município'].fillna('Desconhecido')

        # Preparar listas para filtros
        municipios = ['Todos']
        if 'Município' in df.columns:
            municipios += sorted(list(df['Município'].unique()))

        # Aplicar filtros do request
        filtered_df = df.copy()
        municipio_filtro = request.GET.get('municipio', 'Todos')

        if municipio_filtro != 'Todos' and 'Município' in filtered_df.columns:
            filtered_df = filtered_df[filtered_df['Município'] == municipio_filtro]

        # Gráficos e estatísticas
        total_planilhas = len(filtered_df)

        # Converter DataFrame para lista de dicionários para o template
        planilhas_list = filtered_df.to_dict('records')

        # Gráfico de pizza - Distribuição por município (se a coluna existir)
        municipio_chart = None
        if 'Município' in filtered_df.columns:
            municipio_counts = filtered_df['Município'].value_counts()
            if len(municipio_counts) > 0:
                fig_municipio = px.pie(
                    names=municipio_counts.index,
                    values=municipio_counts.values,
                    title='Distribuição das Planilhas por Município'
                )
                fig_municipio.update_traces(textposition='inside', textinfo='percent+label')
                municipio_chart = fig_municipio.to_json()
    else:
        # Valores padrão se o DataFrame estiver vazio
        municipios = ['Todos']
        municipio_filtro = 'Todos'
        total_planilhas = 0
        planilhas_list = []
        municipio_chart = None

    context = {
        'title': 'Dashboard de Planilhas',
        'planilhas': planilhas_list,
        'total_planilhas': total_planilhas,
        'municipios': municipios,
        'municipio_filtro': municipio_filtro,
        'municipio_chart': municipio_chart,
    }

    return render(request, 'supervisao_ocupacional/planilhas.html', context)
